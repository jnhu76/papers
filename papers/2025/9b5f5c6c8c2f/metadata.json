{
  "id": "9b5f5c6c8c2f",
  "title": "Scalable Address Spaces using Concurrent Interval Skiplist",
  "authors": ["Kim, Tae Woo", "Kwon, Youngjin", "Kang, Jeehoon"],
  "year": 2025,
  "conference": "ACM SIGOPS 31st Symposium on Operating Systems Principles (SOSP '25)",
  "category": "操作系统",
  "keywords": ["操作系统", "地址空间", "可扩展性", "并发数据结构", "内存管理", "并行操作", "区间跳表"],
  "abstract": "A kernel's address space design can significantly bottleneck multi-threaded applications, as address space operations such as mmap() and mumap() are serialized by coarse-grained locks like Linux's mmap_lock. Such locks have long been known as one of the most intractable contention points in memory management. While prior works have attempted to address this issue, they either fail to sufficiently parallelize operations or are impractical for real-world kernels. We present the first scalable and practical address space design that parallelizes critical operations. We identify key scalability bottlenecks—many of which extend beyond address spaces—and address them with targeted solutions. At its core is the concurrent interval skiplist, a new data structure that integrates mapping and locking for parallel interval operations. We implement our design on Linux 6.8 and evaluate it on a dual-socket 48-core machine. Our results show a significant throughput improvement of 13.1× for an mmap() microbenchmark, 4.49× for LevelDB, 3.19× for the Apache web server, 1.47× for Metis MapReduce, and 1.27× for Psearchy text indexing."
}