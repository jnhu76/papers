{
  "id": "b8f0e0b7e6a4",
  "title": "LavaStore: ByteDance’s Purpose-built, High-performance, Cost-effective Local Storage Engine for Cloud Services",
  "authors": ["Hao Wang", "Jiaxin Ou", "Ming Zhao", "Sheng Qiu", "Yizheng Jiao", "Yi Wang", "Qizhong Mao", "Zhengyu Yang", "Yang Liu", "Jianshun Zhang", "Jianyang Hu", "Jingwei Zhang", "Jinrui Liu", "Jiaqiang Chen", "Yong Shen", "Lixun Cao", "Heng Zhang", "Hongde Li", "Ming Li", "Yue Ma", "Lei Zhang", "Jian Liu", "Guanghui Zhang", "Fei Liu", "Jianjun Chen"],
  "year": 2024,
  "conference": "PVLDB",
  "category": "数据库系统",
  "keywords": ["键值存储", "LSM-tree", "RocksDB", "KV分离", "垃圾回收", "写性能优化", "LavaStore"],
  "abstract": "Persistent key-value (KV) stores are widely used by cloud services at ByteDance as local storage engines, and RocksDB used to be the _de facto_ implementation since it can be tailored to a variety of workloads and requirements. In this paper, we provide key insights into local storage engine usage at ByteDance, explain why the combination of highly write-intensive workloads and stringent requirements on cost efficiency and point lookup tail latency may pose challenges to a general-purpose local storage engine such as RocksDB, and present the design and implementation of _LavaStore_, a high-performance cost-effective local storage engine purpose-built to address these challenges.\n\nLavaStore achieves its design goals by selectively customizing a few components of a RocksDB-based, general-purpose local storage engine, including a distinct KV separation design that decouples garbage collection from compaction, a specialized engine type for the commonly recurring Write-Ahead-Logging workload, and a customized user-space append-only filesystem. LavaStore has been deployed to production with hundreds of thousands of running instances, storing more than 100 PB of data and serving billions of requests per second, bringing significant performance improvements and cost reductions to customers over their original local storage engines. For example, a ByteDance proprietary distributed OLTP database service has experienced a reduction in average write and read latency by 61% and 16%, respectively, and a ByteDance proprietary caching service has gained an 87% increase in write throughput with no more than 6% space overhead."
}