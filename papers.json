[
  {
    "id": "9b5f5c6c8c2f",
    "title": "Scalable Address Spaces using Concurrent Interval Skiplist",
    "authors": [
      "Kim, Tae Woo",
      "Kwon, Youngjin",
      "Kang, Jeehoon"
    ],
    "year": 2025,
    "conference": "ACM SIGOPS 31st Symposium on Operating Systems Principles (SOSP '25)",
    "category": "操作系统",
    "keywords": [
      "操作系统",
      "地址空间",
      "可扩展性",
      "并发数据结构",
      "内存管理",
      "并行操作",
      "区间跳表"
    ],
    "abstract": "A kernel's address space design can significantly bottleneck multi-threaded applications, as address space operations such as mmap() and mumap() are serialized by coarse-grained locks like Linux's mmap_lock. Such locks have long been known as one of the most intractable contention points in memory management. While prior works have attempted to address this issue, they either fail to sufficiently parallelize operations or are impractical for real-world kernels. We present the first scalable and practical address space design that parallelizes critical operations. We identify key scalability bottlenecks—many of which extend beyond address spaces—and address them with targeted solutions. At its core is the concurrent interval skiplist, a new data structure that integrates mapping and locking for parallel interval operations. We implement our design on Linux 6.8 and evaluate it on a dual-socket 48-core machine. Our results show a significant throughput improvement of 13.1× for an mmap() microbenchmark, 4.49× for LevelDB, 3.19× for the Apache web server, 1.47× for Metis MapReduce, and 1.27× for Psearchy text indexing.",
    "htmlFile": "papers/2025/9b5f5c6c8c2f/index.html"
  },
  {
    "id": "b4a1c8b4a1c8",
    "title": "How to Copy Memory? Coordinated Asynchronous Copy as a First-Class OS Service",
    "authors": [
      "Jingkai He",
      "Yunpeng Dong",
      "Dong Du",
      "Mo Zou",
      "Zhitai Yu",
      "Yuxin Ren",
      "Ning Jia",
      "Yubin Xia",
      "Haibo Chen"
    ],
    "year": 2025,
    "conference": "ACM SIGOPS 31st Symposium on Operating Systems Principles (SOSP '25)",
    "category": "操作系统",
    "keywords": [
      "内存复制",
      "异步复制",
      "操作系统服务",
      "操作系统",
      "内存管理",
      "性能优化",
      "硬件加速"
    ],
    "abstract": "In modern systems, memory copy remains a critical performance bottleneck across various scenarios, playing a pervasive role in system-wide execution such as syscalls, IPC, and user-mode applications. Numerous efforts have aimed at optimizing copy performance, including zero-copy with page remapping and hardware-accelerated copy. However, they typically target specific use cases, such as Linux zero-copy send() for messages of ≥10KB. This paper argues for copy as a first-class OS service, offering three key benefits: (1) with the asynchronous copy abstraction provided by the service, applications can overlap their execution with copy; (2) the service can effectively utilize hardware capabilities to enhance copy performance; (3) the service's global view of copies further enables holistic optimization. To this end, we introduce Copier, a new OS service of coordinated asynchronous copy, to serve both user-mode applications and OS services. We build Copier-Linux to demonstrate Copier's ability to improve performance for diverse use cases, including Redis, Protobuf, network stack, proxy, etc. Evaluations show that Copier achieves up to a 1.8× speedup for real-world applications like Redis and a 1.6× improvement over zIO, the state-of-the-art in optimizing copy efficiency. To further facilitate adoption, we develop a toolchain to ease the use of Copier. We also integrate Copier into a commercial smartphone OS (HarmonyOS 5.0), achieving promising results.",
    "htmlFile": "papers/2025/b4a1c8b4a1c8/index.html"
  }
]